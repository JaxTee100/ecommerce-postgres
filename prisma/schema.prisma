// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("USER") // Either "USER" or "ADMIN"
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] // Add this to establish a two-way relation

  // Relationships
  orders   Order[]
  CartItem CartItem[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  OrderItem OrderItem[]
  CartItem  CartItem[]
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  total     Float
  createdAt DateTime @default(now())
  status     String   @default("PENDING") 

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  OrderItem OrderItem[]
  CartItem  CartItem[]
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  quantity  Int    @default(1)

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}
